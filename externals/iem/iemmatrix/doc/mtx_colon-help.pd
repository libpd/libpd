#N canvas 419 109 670 565 10;
#X text 458 17 updated for;
#X obj 546 17 iemmatrix 0.2;
#X obj 595 43 matrix;
#X text 465 42 see also help for;
#X msg 12 124 bang;
#X text 90 15 [mtx_colon];
#X text 47 34 colon operator: reading as row-vector / creating ascending
number arrays;
#X text 153 122 1 sequences;
#X obj 12 277 mtx_print mtx_colon-sequence;
#X obj 313 275 mtx_print mtx_colon-readout;
#X obj 313 186 t a a;
#X obj 432 231 mtx_print orig;
#X obj 313 240 mtx_:;
#X msg 85 141 bang;
#X obj 12 233 mtx_:;
#X msg 85 161 0 3;
#X msg 12 145 2 1.5 7;
#X text 422 120 2 linear read-out;
#X text 8 60 you can create sequences (matrix vectors) with start-
\, stop- and increment values. similar to octave you can also read
out matrices linearly as vectors.;
#X obj 301 411 mtx_print orig;
#X obj 257 499 mtx_:;
#X obj 257 434 mtx_transpose;
#X obj 257 411 t a a;
#X obj 257 456 mtx_repmat 1 3;
#X obj 257 520 mtx_print sample-hold;
#X msg 313 141 matrix 2 2 1 3 2 4;
#X msg 257 358 matrix 1 4 1 2 3 4;
#X obj 342 498 mtx_print repeated-orig;
#X obj 257 477 t a a;
#X text 251 324 this is e.g. useful when repeating values via sample+hold
;
#X connect 4 0 16 0;
#X connect 10 0 12 0;
#X connect 10 1 11 0;
#X connect 12 0 9 0;
#X connect 13 0 15 0;
#X connect 14 0 8 0;
#X connect 15 0 14 0;
#X connect 16 0 14 0;
#X connect 20 0 24 0;
#X connect 21 0 23 0;
#X connect 22 0 21 0;
#X connect 22 1 19 0;
#X connect 23 0 28 0;
#X connect 25 0 10 0;
#X connect 26 0 22 0;
#X connect 28 0 20 0;
#X connect 28 1 27 0;
