#N canvas 0 0 725 412 10;
#N canvas 95 194 290 179 Gem.init 0;
#X obj 83 30 loadbang;
#X msg 83 67 reset;
#X obj 83 107 outlet;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X restore 100 115 pd Gem.init;
#N canvas 340 107 682 322 gemwin 0;
#X obj 102 122 tgl 15 0 \$0-gemstart \$0-gemstart empty 17 7 0 10 -262144
-1 -1 0 1;
#X obj 102 161 r \$0-gemstart;
#X obj 102 182 select 1 0;
#X msg 102 214 create \, 1;
#X msg 177 215 destroy;
#X obj 102 239 t a;
#X obj 318 54 inlet;
#X obj 318 255 gemwin;
#X obj 318 100 t a a;
#X obj 318 287 outlet;
#X obj 350 128 route create destroy;
#X obj 350 150 t b;
#X msg 350 172 1;
#X obj 390 150 t b;
#X msg 390 172 0;
#X obj 350 195 t f;
#X msg 350 219 set \$1;
#X text 118 122 rendering;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 1 4 0;
#X connect 3 0 5 0;
#X connect 4 0 5 0;
#X connect 5 0 8 0;
#X connect 6 0 8 0;
#X connect 7 0 9 0;
#X connect 8 0 7 0;
#X connect 8 1 10 0;
#X connect 10 0 11 0;
#X connect 10 1 13 0;
#X connect 11 0 12 0;
#X connect 12 0 15 0;
#X connect 13 0 14 0;
#X connect 14 0 15 0;
#X connect 15 0 16 0;
#X connect 16 0 0 0;
#X coords 0 -1 1 1 85 40 1 100 100;
#X restore 100 134 pd gemwin;
#X text 247 146 just enable the toggle labeled "rendering" to create
a window and start rendering \; switching the toggle off will destroy
the window;
#X text 260 60 by now we assume that you know how to control a Gem-window
;
#X text 252 268 apart from that \, the subpatch is really the same
as [gemwin] itself \; e.g. you can send any message to it that [gemwin]
understands.;
#X text 249 204 thus you don't have to click on [create( and then [1(
anymore...;
#X text 249 113 for the sake of simplicity \, from now on the examples
will use the subpatch on the left side to control the Gem-window.;
#X connect 0 0 1 0;
