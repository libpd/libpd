#N canvas 0 124 683 381 10;
#X text 452 8 GEM object;
#X obj 8 196 cnv 15 430 135 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 39 198 Inlets:;
#X text 39 281 Outlets:;
#X obj 8 156 cnv 15 430 30 empty empty empty 20 12 0 14 -195568 -66577
0;
#X text 17 155 Arguments:;
#X obj 8 66 cnv 15 430 80 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 449 77 cnv 15 170 280 empty empty empty 20 12 0 14 -228992 -66577
0;
#X text 453 60 Example:;
#X obj 514 290 cnv 15 100 60 empty empty empty 20 12 0 14 -195568 -66577
0;
#N canvas 0 0 450 300 gemwin 0;
#X obj 132 136 gemwin;
#X obj 67 89 outlet;
#X obj 67 10 inlet;
#X obj 67 41 route create;
#X msg 67 70 set destroy;
#X msg 142 68 set create;
#X msg 132 112 create \, 1;
#X msg 198 112 destroy;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 0 6 0;
#X connect 3 1 5 0;
#X connect 3 1 7 0;
#X connect 4 0 1 0;
#X connect 5 0 1 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X restore 519 329 pd gemwin;
#X msg 519 310 create;
#X text 515 289 Create window:;
#X obj 451 158 cnv 15 160 100 empty empty empty 20 12 0 14 -24198 -66577
0;
#X obj 451 119 gemhead;
#X text 71 31 Class: pix object;
#X obj 502 102 bng 15 250 50 0 empty empty pix_load 20 8 0 8 -262144
-1 -1;
#N canvas 0 0 587 366 image 0;
#X obj 77 48 inlet;
#X obj 77 344 outlet;
#X obj 77 205 pix_image examples/data/fractal.JPG;
#X obj 223 55 inlet;
#X msg 223 123 open \$1;
#X obj 223 100 openpanel;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 3 0 5 0;
#X connect 4 0 2 0;
#X connect 5 0 4 0;
#X restore 451 138 pd image;
#X obj 451 263 pix_texture;
#X text 17 295 Outlet 1: gemlist;
#X text 23 212 Inlet 1: gemlist;
#X obj 451 285 square 3;
#X text 503 88 (JPEG \, TIFF \, ..);
#X obj 541 122 gemhead;
#N canvas 0 0 587 366 image 0;
#X obj 77 48 inlet;
#X obj 77 344 outlet;
#X obj 77 205 pix_image examples/data/dancer.JPG;
#X obj 223 55 inlet;
#X msg 223 123 open \$1;
#X obj 223 100 openpanel;
#X obj 77 281 pix_buf;
#X msg 103 257 auto 1;
#X obj 103 236 loadbang;
#X text 156 263 [pix_buf] with auto 1 is important if we want to recalculate
our pix-effect each frame but don't want to reload the image all the
time.;
#X connect 0 0 2 0;
#X connect 2 0 6 0;
#X connect 3 0 5 0;
#X connect 4 0 2 0;
#X connect 5 0 4 0;
#X connect 6 0 1 0;
#X connect 7 0 6 0;
#X connect 8 0 7 0;
#X restore 541 141 pd image;
#X obj 592 103 bng 15 250 50 0 empty empty pix_load 20 8 0 8 -262144
-1 -1;
#X text 23 227 Inlet 2: gemlist;
#X text 449 77 open two different images;
#X text 50 12 Synopsis: [pix_mix];
#X obj 476 174 hsl 128 15 0 1 0 1 empty empty empty -2 -6 0 8 -262144
-1 -1 6300 1;
#X floatatom 473 199 5 0 0 0 - - -;
#X msg 530 198 0.7 0.7;
#X text 29 67 Description: mix 2 images based on mixing factors;
#X text 23 241 Inlet 3: list: weights for left/right image;
#X text 63 166 list: [leftGain [rightGain]] (defaults: 0.5 0.5);
#X obj 451 226 pix_mix 0;
#X text 14 81 [pix_mix] will mix 2 images just like a video-mixer.
You can supply mixing factors A and B \, and the result will be out=in1*A+in2*B.
If you supply only one factor A \, the result will be out=in1*(1-A)+in2*A.
;
#X text 22 255 Inlet 3: float: weight for left image. right weight
will be the reciproque value (for crossfading);
#X connect 10 0 11 0;
#X connect 11 0 10 0;
#X connect 14 0 17 0;
#X connect 16 0 17 1;
#X connect 17 0 35 0;
#X connect 18 0 21 0;
#X connect 23 0 24 0;
#X connect 24 0 35 1;
#X connect 25 0 24 1;
#X connect 29 0 30 0;
#X connect 30 0 35 2;
#X connect 31 0 35 2;
#X connect 35 0 18 0;
