#N canvas 230 71 587 465 12;
#X floatatom 179 207 0 0 0;
#X obj 53 199 f;
#X obj 89 194 + 1;
#X obj 53 232 sel;
#X msg 69 165 1;
#X msg 285 213 0;
#X obj 418 342 *;
#X obj 418 392 del;
#X obj 414 292 t f f;
#X obj 418 322 -;
#X msg 469 304 0;
#X obj 449 346 r delay-multiplier;
#X obj 432 369 r reset-stop;
#X obj 238 110 inlet;
#X obj 179 184 getsize \$1 \$2;
#X obj 285 233 element \$1 \$2;
#X obj 187 234 element \$1 \$2;
#X obj 208 408 outlet;
#X obj 349 408 outlet;
#X obj 187 254 get \$3 y w x;
#X obj 285 253 get \$3 y w;
#X obj 265 408 outlet;
#X obj 342 302 t f b;
#X obj 372 326 0;
#X obj 238 130 t b b p b;
#X text 229 93 pointer in;
#X text 20 12 This is an abstraction used in the sequencer example. Here we take a pointer and sequence an array belonging to it \, either the amplitude or the frequency \, depending on the value of argument 2 The template of the scalar is given by argument 1 and that of the array elements by argument 3;
#X text 90 431 Outlets: new y value \, new w value \, time to ramp to new values.;
#X connect 1 0 2 0;
#X connect 1 0 3 0;
#X connect 2 0 1 1;
#X connect 3 1 16 0;
#X connect 4 0 1 1;
#X connect 5 0 15 0;
#X connect 6 0 7 0;
#X connect 6 0 18 0;
#X connect 7 0 1 0;
#X connect 8 0 9 1;
#X connect 8 1 9 0;
#X connect 9 0 6 0;
#X connect 10 0 9 1;
#X connect 11 0 6 1;
#X connect 12 0 7 0;
#X connect 13 0 24 0;
#X connect 14 0 0 0;
#X connect 14 0 3 1;
#X connect 15 0 20 0;
#X connect 16 0 19 0;
#X connect 19 0 17 0;
#X connect 19 1 21 0;
#X connect 19 2 8 0;
#X connect 20 0 17 0;
#X connect 20 1 22 0;
#X connect 22 0 21 0;
#X connect 22 1 23 0;
#X connect 23 0 18 0;
#X connect 24 0 1 0;
#X connect 24 1 5 0;
#X connect 24 2 15 1;
#X connect 24 2 14 0;
#X connect 24 2 16 1;
#X connect 24 3 4 0;
#X connect 24 3 10 0;
